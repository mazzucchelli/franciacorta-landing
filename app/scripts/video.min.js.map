{"version":3,"sources":["webpack:///webpack/bootstrap 64ecb3cd80d157ac565b","webpack:///./dev/js/video.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","id","loaded","modules","call","m","c","p","document","addEventListener","initialiseMediaPlayer","mediaPlayer","getElementById","playPauseBtn","muteBtn","controls","updateProgressBar","changeButtonType","e","muted","this","pause","percentage","Math","floor","duration","currentTime","progressBar","value","innerHTML","btn","title","className"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAC,WACAE,GAAAH,EACAI,QAAA,GAUA,OANAC,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,QAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,GAGAV,EAAA,gCCtCAW,SAASC,iBAAiB,mBAAoB,WAAaC,MAA4B,GAEvF,IAAMA,EAAwB,WAE7B,IAAMC,EAAcH,SAASI,eAAe,eACtCC,EAAeL,SAASI,eAAe,qBACvCE,EAAUN,SAASI,eAAe,eACpBJ,SAASI,eAAe,gBAG5CD,EAAYI,UAAW,EAGvBJ,EAAYF,iBAAiB,aAAcO,GAAmB,GAG9DL,EAAYF,iBAAiB,OAAQ,WAEpCQ,EAAiBJ,EAAc,WAC7B,GACHF,EAAYF,iBAAiB,QAAS,WAErCQ,EAAiBJ,EAAc,UAC7B,GAGHF,EAAYF,iBAAiB,eAAgB,SAASS,GAEjDP,EAAYQ,MAAOF,EAAiBH,EAAS,UAC5CG,EAAiBH,EAAS,UAC7B,GACHH,EAAYF,iBAAiB,QAAS,WAAaW,KAAKC,UAAY,IA4BrE,IAgBML,EAAoB,WAEzB,IAAIM,EAAaC,KAAKC,MAAO,IAAMb,YAAYc,SAAYd,YAAYe,aAEvEC,YAAYC,MAAQN,EAEpBK,YAAYE,UAAYP,EAAa,YAIhCL,EAAmB,SAACa,EAAKF,GAC9BE,EAAIC,MAAQH,EACZE,EAAID,UAAYD,EAChBE,EAAIE,UAAYJ","file":"video.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 64ecb3cd80d157ac565b","document.addEventListener(\"DOMContentLoaded\", function() { initialiseMediaPlayer(); }, false);\n\nconst initialiseMediaPlayer = () => {\n\n\tconst mediaPlayer = document.getElementById('media-video');\n\tconst playPauseBtn = document.getElementById('play-pause-button');\n\tconst muteBtn = document.getElementById('mute-button');\n\tconst progressBar = document.getElementById('progress-bar');\n\n\t// Hide the browser's default controls\n\tmediaPlayer.controls = false;\n\n\t// Add a listener for the timeupdate event so we can update the progress bar\n\tmediaPlayer.addEventListener('timeupdate', updateProgressBar, false);\n\n\t// Add a listener for the play and pause events so the buttons state can be updated\n\tmediaPlayer.addEventListener('play', function() {\n\t\t// Change the button to be a pause button\n\t\tchangeButtonType(playPauseBtn, 'pause');\n\t}, false);\n\tmediaPlayer.addEventListener('pause', function() {\n\t\t// Change the button to be a play button\n\t\tchangeButtonType(playPauseBtn, 'play');\n\t}, false);\n\n\t// need to work on this one more...how to know it's muted?\n\tmediaPlayer.addEventListener('volumechange', function(e) {\n\t\t// Update the button to be mute/unmute\n\t\tif (mediaPlayer.muted) changeButtonType(muteBtn, 'unmute');\n\t\telse changeButtonType(muteBtn, 'mute');\n\t}, false);\n\tmediaPlayer.addEventListener('ended', function() { this.pause(); }, false);\n}\n\nconst togglePlayPause = () => {\n\t// If the mediaPlayer is currently paused or has ended\n\tif  (mediaPlayer.paused || mediaPlayer.ended ) {\n\t\tchangeButtonType(playPauseBtn, 'pause');\n\t\tmediaPlayer.play();\n\t} else {\n\t\tchangeButtonType(playPauseBtn, 'play');\n\t\tmediaPlayer.pause();\n\t}\n}\n\n// Stop the current media from playing, and return it to the start position\nconst stopPlayer = () => {\n\tmediaPlayer.pause();\n\tmediaPlayer.currentTime = 0;\n}\n\n// Changes the volume on the media player\nfunction changeVolume(direction) {\n\tif ( direction === '+' ) mediaPlayer.volume += mediaPlayer.volume == 1 ? 0 : 0.1;\n\telse mediaPlayer.volume -= (mediaPlayer.volume == 0 ? 0 : 0.1);\n\tmediaPlayer.volume = parseFloat(mediaPlayer.volume).toFixed(1);\n}\n\n// Toggles the media player's mute and unmute status\nconst toggleMute = () => {\n\tif ( mediaPlayer.muted ) {\n\t\tchangeButtonType(muteBtn, 'mute');\n\t\tmediaPlayer.muted = false;\n\t} else {\n\t\tchangeButtonType(muteBtn, 'unmute');\n\t\tmediaPlayer.muted = true;\n\t}\n}\n\nconst replayMedia = () => {\n\tresetPlayer();\n\tmediaPlayer.play();\n}\n\n// Update the progress bar\nconst updateProgressBar = () => {\n\t// Work out how much of the media has played via the duration and currentTime parameters\n\tvar percentage = Math.floor((100 / mediaPlayer.duration) * mediaPlayer.currentTime);\n\t// Update the progress bar's value\n\tprogressBar.value = percentage;\n\t// Update the progress bar's text (for browsers that don't support the progress element)\n\tprogressBar.innerHTML = percentage + '% played';\n}\n\n// Updates a button's title, innerHTML and CSS class to a certain value\nconst changeButtonType = (btn, value) => {\n\tbtn.title = value;\n\tbtn.innerHTML = value;\n\tbtn.className = value;\n}\n\n// Loads a video item into the media player\nconst loadVideo = () => {\n\tfor ( let i = 0; i < arguments.length; i++ ) {\n\t\tlet file = arguments[i].split('.');\n\t\tlet ext = file[file.length - 1];\n\t\tif ( canPlayVideo(ext) ) {\n\t\t\tresetPlayer();\n\t\t\tmediaPlayer.src = arguments[i];\n\t\t\tmediaPlayer.load();\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// Checks if the browser can play this particular type of file or not\nconst canPlayVideo = (ext) => {\n\tconst ableToPlay = mediaPlayer.canPlayType('video/' + ext);\n\tif ( ableToPlay == '' ) return false;\n\telse return true;\n}\n\n// Resets the media player\nconst resetPlayer = () => {\n\tprogressBar.value = 0;\n\tmediaPlayer.currentTime = 0;\n\tchangeButtonType(playPauseBtn, 'play');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./dev/js/video.js"],"sourceRoot":""}